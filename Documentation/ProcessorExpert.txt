=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "TPM0"      (component Init_TPM_VAR0)
   - TPM0_Init -This method initializes registers of the TPM module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "GPIO1"     (component GPIO_LDD)
   - GPIO1_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - GPIO1_SetFieldValue -This method sets the output data value of the specified bit field.
   - GPIO1_GetFieldValue -This method returns the current input data of the specified field.
   - GPIO1_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - GPIO1_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - GPIO1_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.

Module "I2C2"      (component I2C_LDD)
   - I2C2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - I2C2_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors,
                etc.
   - I2C2_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes inclusive 
                of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address must be 
                specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target slave 
                address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. The 
                state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent are 
                not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2C2_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.

Module "TI1"       (component TimerInt)

Module "TU2"       (component TimerUnit_LDD)
   - TU2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "FMSTR1"    (component FreeMaster)
   - FMSTR1_Poll -In the poll-driven or short interrupt modes, this function handles the protocol decoding and execution. In 
                the poll-driven mode, this function also handles the SCI communication. In the long interrupt mode, this 
                function compiles as an empty function and may still be called.
   - FMSTR1_Recorder -Recorder worker routine. This returns quickly if recorder is not running, otherwise it calls quite 
                lengthy recorder routine which does all the recorder work (sampling, triggering).   This method is enabled only 
                if the Recorder property is enabled.
   - FMSTR1_TriggerRec -Pull the trigger of the recorder. This function starts the post-trigger stop countdown.  This method is 
                enabled only if the Recorder property is enabled.
   - FMSTR1_GetAppCmd -Fetch the application command code if one is ready for processing.   This method is enabled only if the 
                Application command property is enabled.
   - FMSTR1_GetAppCmdData -Get a pointer to application command data. This function can be used to retrieve the Application 
                Command data, once the application determines the Application Command is pending.  This method is enabled only 
                if the Application command property is enabled.
   - FMSTR1_RegisterAppCmdCall -Register or unregister application command callback handler.   This method is enabled only if 
                the Application command property is enabled.
   - FMSTR1_AppCmdAck -This function is used when Application Command processing is finished in the application. The 
                nResultCode passed to this function is returned back to the host and the driver is re-initialized to expect the 
                next Application Command.   This method is enabled only if the Application command property is enabled.
   - FMSTR1_AppCmdSetResponseData -This function can be used before the Application Command processing is finished, when there 
                are any data to be returned back to the PC.  This method is enabled only if the Application command property is 
                enabled.

Module "Cpu"       (component MKL25Z128LK4)

===================================================================================
